[2016-11-18 16:50:11.085] log4j - 14172  INFO [main] --- Cmp: Starting Cmp on guoxiaozheng with PID 14172 (E:\guoxiaozheng\sumpay-accountant-service\target\classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-18 16:50:11.087] log4j - 14172 DEBUG [main] --- Cmp: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-18 16:50:11.670] log4j - 14172 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-18 16:50:11.670] log4j - 14172 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-18 16:50:11.672] log4j - 14172 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-18 16:50:12.093] log4j - 14172 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-18 16:50:12.093] log4j - 14172  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-18 16:50:12.096] log4j - 14172 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-18 16:50:12.101] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-18 16:50:12.101] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-18 16:50:12.103] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-18 16:50:12.107] log4j - 14172 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-18 16:50:12.111] log4j - 14172 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-18 16:50:12.299] log4j - 14172 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-18 16:50:12.430] log4j - 14172 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-18 16:50:12.944] log4j - 14172  INFO [main] --- StandardService: Starting service Tomcat
[2016-11-18 16:50:12.945] log4j - 14172  INFO [main] --- StandardEngine: Starting Servlet Engine: Apache Tomcat/8.0.23
[2016-11-18 16:50:13.017] log4j - 14172  INFO [localhost-startStop-1] --- [/]: Initializing Spring embedded WebApplicationContext
[2016-11-18 16:50:13.637] log4j - 14172 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-18 16:50:13.638] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-18 16:50:13.638] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-18 16:50:13.638] log4j - 14172 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-18 16:50:13.638] log4j - 14172 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-18 16:50:13.639] log4j - 14172 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-18 16:50:14.280] log4j - 14172  INFO [main] --- Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
[2016-11-18 16:50:14.287] log4j - 14172  INFO [main] --- Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
[2016-11-18 16:50:14.298] log4j - 14172  INFO [main] --- NioSelectorPool: Using a shared selector for servlet write/read
[2016-11-18 16:50:14.312] log4j - 14172  INFO [main] --- Cmp: Started Cmp in 3.431 seconds (JVM running for 3.654)
[2016-11-18 16:50:25.082] log4j - 14172  INFO [http-nio-8080-exec-1] --- [/]: Initializing Spring FrameworkServlet 'dispatcherServlet'
[2016-11-18 16:50:25.118] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:50:25.123] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4657f100] was not registered for synchronization because synchronization is not active
[2016-11-18 16:50:25.198] log4j - 14172  INFO [http-nio-8080-exec-1] --- DruidDataSource: {dataSource-1} inited
[2016-11-18 16:50:25.416] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@15e4d02d] will not be managed by Spring
[2016-11-18 16:50:25.416] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- insertSelective: ooo Using Connection [oracle.jdbc.driver.T4CConnection@15e4d02d]
[2016-11-18 16:50:25.419] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- insertSelective: ==>  Preparing: insert into CAS_BANK_BALANCE_CHECK ( ID, BALANCE_DATE, MODIFY_TIME, BANK_ID ) values ( ?, ?, ?, ? ) 
[2016-11-18 16:50:25.458] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- insertSelective: ==> Parameters: bd0f1af7dcc8444ba997dd3b1af0aa37(String), 20151025(String), sagfdshg55(String), safd54dsg(String)
[2016-11-18 16:50:25.485] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- insertSelective: <==    Updates: 1
[2016-11-18 16:50:25.485] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4657f100]
[2016-11-18 16:50:25.486] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:50:25.486] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6d6a9ef2] was not registered for synchronization because synchronization is not active
[2016-11-18 16:50:25.489] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@15e4d02d] will not be managed by Spring
[2016-11-18 16:50:25.489] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- selectByExample: ooo Using Connection [oracle.jdbc.driver.T4CConnection@15e4d02d]
[2016-11-18 16:50:25.489] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- selectByExample: ==>  Preparing: select ID, BALANCE_DATE, PRE_BALANCE, DAY_DEBTOR_AMOUNT, DAY_CREDITOR_AMOUNT, DAY_CERTIFICATE, END_BALANCE, BANK_BALANCE, DIFF_AMOUNT, CHECK_ACCOUNT_STATUS, MODIFY_TIME, MODIFY_USER_ID, BANK_ID from CAS_BANK_BALANCE_CHECK 
[2016-11-18 16:50:25.490] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- selectByExample: ==> Parameters: 
[2016-11-18 16:50:25.521] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- selectByExample: <==      Total: 39
[2016-11-18 16:50:25.521] log4j - 14172 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6d6a9ef2]
[2016-11-18 16:50:25.529] log4j - 14172  INFO [http-nio-8080-exec-1] --- BankBalanceCheckService: [{"id":"asfgds54646","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7373e0c2c13244f0997f272d2c51e876","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2475a72b478549ada1ca92e288888ebf","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"4146393cdfe04bdb95c2fbc96e90a2f1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5f6187831fae4eaa8f9b1340c26dcc84","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"60bf20e56030414fb1695f94428efbe6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"f5517b0ac31748e9881b899cc0d1208d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5240fbdb0c4049f7b41fde99636512df","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"84894511101445f38cff0933eca0c692","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"25d4ab7e054447189fa98fd58eb51761","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"3d24681ee4d141f69dbc0dc95c134a69","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"cdacaf91c38d4afebbd799b05f7dce63","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"0b66e6af728c4922b1942d378d813ca2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e0c0032ede22433b92f5be78918888d5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6c0420c872314b6c9be2d1565ffeb9f6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7da8d78d867c45699e88a49adb2f5925","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"a50cd7e0dbac4d778076d1b544a5eb07","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"85a7fe0b752e4906bb85a3e8a51d7dcd","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6739d23559cf4c80be845c7d121f740d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9a01d497577845bd8712e44ff61bd8a2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"eb8d6bba8157425b8baeb68a2dee6be5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"453967403fb34889bc54c6dc8718c666","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"538451bdd78b41f5b9ad97b34e8b34fe","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"1726951d0e2645e28ffa7a9554ebefe9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2b233aaae96e48eaa89fda3f23bd652c","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bd472de09b3422f865e8f703d715dc1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9c4416381c8f4970b4722c29734be573","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"c5c63f18872546ea9679f703dbcaa6a6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"8310d176114e430b930b0d3686ddc13d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"56e817bc12ff4788a327219997fce61a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5eb2b9cdcf05424b99768da8fb9e42f9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"be2860df6fb044559586e82e45621680","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"02d8a7dc1aec44189838ebc7341b0872","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"900c3465ace84278b570ee218059d8ec","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"bd0f1af7dcc8444ba997dd3b1af0aa37","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e802d179b2ff428ab7650752e424446a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"91804019c2b44714a2dc1fb1d317d238","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"813fe9b0f68244e0a86a77d158035bd9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"adc21c95bf5c4224b324874b6b4ca20a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"}]
[2016-11-18 16:50:28.576] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:50:28.576] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a778b40] was not registered for synchronization because synchronization is not active
[2016-11-18 16:50:28.577] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@15e4d02d] will not be managed by Spring
[2016-11-18 16:50:28.578] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- insertSelective: ooo Using Connection [oracle.jdbc.driver.T4CConnection@15e4d02d]
[2016-11-18 16:50:28.578] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- insertSelective: ==>  Preparing: insert into CAS_BANK_BALANCE_CHECK ( ID, BALANCE_DATE, MODIFY_TIME, BANK_ID ) values ( ?, ?, ?, ? ) 
[2016-11-18 16:50:28.578] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- insertSelective: ==> Parameters: 509e7c6aff6743d19b8d2d9aae17aa8b(String), 20151025(String), sagfdshg55(String), safd54dsg(String)
[2016-11-18 16:50:28.585] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- insertSelective: <==    Updates: 1
[2016-11-18 16:50:28.585] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3a778b40]
[2016-11-18 16:50:28.585] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:50:28.586] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6ba5ae0f] was not registered for synchronization because synchronization is not active
[2016-11-18 16:50:28.586] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@15e4d02d] will not be managed by Spring
[2016-11-18 16:50:28.586] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- selectByExample: ooo Using Connection [oracle.jdbc.driver.T4CConnection@15e4d02d]
[2016-11-18 16:50:28.587] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- selectByExample: ==>  Preparing: select ID, BALANCE_DATE, PRE_BALANCE, DAY_DEBTOR_AMOUNT, DAY_CREDITOR_AMOUNT, DAY_CERTIFICATE, END_BALANCE, BANK_BALANCE, DIFF_AMOUNT, CHECK_ACCOUNT_STATUS, MODIFY_TIME, MODIFY_USER_ID, BANK_ID from CAS_BANK_BALANCE_CHECK 
[2016-11-18 16:50:28.587] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- selectByExample: ==> Parameters: 
[2016-11-18 16:50:28.604] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- selectByExample: <==      Total: 40
[2016-11-18 16:50:28.604] log4j - 14172 DEBUG [http-nio-8080-exec-3] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6ba5ae0f]
[2016-11-18 16:50:28.605] log4j - 14172  INFO [http-nio-8080-exec-3] --- BankBalanceCheckService: [{"id":"asfgds54646","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7373e0c2c13244f0997f272d2c51e876","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2475a72b478549ada1ca92e288888ebf","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"4146393cdfe04bdb95c2fbc96e90a2f1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5f6187831fae4eaa8f9b1340c26dcc84","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"60bf20e56030414fb1695f94428efbe6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"f5517b0ac31748e9881b899cc0d1208d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5240fbdb0c4049f7b41fde99636512df","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"84894511101445f38cff0933eca0c692","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"25d4ab7e054447189fa98fd58eb51761","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"3d24681ee4d141f69dbc0dc95c134a69","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"cdacaf91c38d4afebbd799b05f7dce63","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"0b66e6af728c4922b1942d378d813ca2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e0c0032ede22433b92f5be78918888d5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6c0420c872314b6c9be2d1565ffeb9f6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7da8d78d867c45699e88a49adb2f5925","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"a50cd7e0dbac4d778076d1b544a5eb07","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"85a7fe0b752e4906bb85a3e8a51d7dcd","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6739d23559cf4c80be845c7d121f740d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9a01d497577845bd8712e44ff61bd8a2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"eb8d6bba8157425b8baeb68a2dee6be5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"453967403fb34889bc54c6dc8718c666","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"538451bdd78b41f5b9ad97b34e8b34fe","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"1726951d0e2645e28ffa7a9554ebefe9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2b233aaae96e48eaa89fda3f23bd652c","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bd472de09b3422f865e8f703d715dc1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9c4416381c8f4970b4722c29734be573","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"c5c63f18872546ea9679f703dbcaa6a6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"8310d176114e430b930b0d3686ddc13d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"56e817bc12ff4788a327219997fce61a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5eb2b9cdcf05424b99768da8fb9e42f9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"be2860df6fb044559586e82e45621680","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"02d8a7dc1aec44189838ebc7341b0872","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"900c3465ace84278b570ee218059d8ec","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"bd0f1af7dcc8444ba997dd3b1af0aa37","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"509e7c6aff6743d19b8d2d9aae17aa8b","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e802d179b2ff428ab7650752e424446a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"91804019c2b44714a2dc1fb1d317d238","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"813fe9b0f68244e0a86a77d158035bd9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"adc21c95bf5c4224b324874b6b4ca20a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"}]
[2016-11-18 16:52:42.655] log4j - 9748  INFO [main] --- Cmp: Starting Cmp on guoxiaozheng with PID 9748 (E:\guoxiaozheng\sumpay-accountant-service\target\classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-18 16:52:42.657] log4j - 9748 DEBUG [main] --- Cmp: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-18 16:52:43.235] log4j - 9748 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-18 16:52:43.235] log4j - 9748 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-18 16:52:43.236] log4j - 9748 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-18 16:52:43.651] log4j - 9748 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-18 16:52:43.651] log4j - 9748  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-18 16:52:43.654] log4j - 9748 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-18 16:52:43.659] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-18 16:52:43.659] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-18 16:52:43.660] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy27
[2016-11-18 16:52:43.665] log4j - 9748 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-18 16:52:43.669] log4j - 9748 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-18 16:52:43.855] log4j - 9748 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-18 16:52:43.981] log4j - 9748 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-18 16:52:44.481] log4j - 9748  INFO [main] --- StandardService: Starting service Tomcat
[2016-11-18 16:52:44.482] log4j - 9748  INFO [main] --- StandardEngine: Starting Servlet Engine: Apache Tomcat/8.0.23
[2016-11-18 16:52:44.546] log4j - 9748  INFO [localhost-startStop-1] --- [/]: Initializing Spring embedded WebApplicationContext
[2016-11-18 16:52:45.166] log4j - 9748 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-18 16:52:45.167] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-18 16:52:45.167] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-18 16:52:45.167] log4j - 9748 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy27
[2016-11-18 16:52:45.167] log4j - 9748 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-18 16:52:45.167] log4j - 9748 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-18 16:52:45.798] log4j - 9748  INFO [main] --- Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
[2016-11-18 16:52:45.805] log4j - 9748  INFO [main] --- Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
[2016-11-18 16:52:45.815] log4j - 9748  INFO [main] --- NioSelectorPool: Using a shared selector for servlet write/read
[2016-11-18 16:52:45.829] log4j - 9748  INFO [main] --- Cmp: Started Cmp in 3.377 seconds (JVM running for 3.597)
[2016-11-18 16:52:49.817] log4j - 9748  INFO [http-nio-8080-exec-1] --- [/]: Initializing Spring FrameworkServlet 'dispatcherServlet'
[2016-11-18 16:52:49.853] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:52:49.857] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@1ce384af] was not registered for synchronization because synchronization is not active
[2016-11-18 16:52:49.931] log4j - 9748  INFO [http-nio-8080-exec-1] --- DruidDataSource: {dataSource-1} inited
[2016-11-18 16:52:50.142] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@16157d6e] will not be managed by Spring
[2016-11-18 16:52:50.143] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- insertSelective: ooo Using Connection [oracle.jdbc.driver.T4CConnection@16157d6e]
[2016-11-18 16:52:50.146] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- insertSelective: ==>  Preparing: insert into CAS_BANK_BALANCE_CHECK ( ID, BALANCE_DATE, MODIFY_TIME, BANK_ID ) values ( ?, ?, ?, ? ) 
[2016-11-18 16:52:50.188] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- insertSelective: ==> Parameters: 9bbf374aed4c422d919a269307d0399a(String), 20151025(String), sagfdshg55(String), safd54dsg(String)
[2016-11-18 16:52:50.204] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- insertSelective: <==    Updates: 1
[2016-11-18 16:52:50.204] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@1ce384af]
[2016-11-18 16:52:50.205] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-18 16:52:50.205] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@cd6d6df] was not registered for synchronization because synchronization is not active
[2016-11-18 16:52:50.209] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@16157d6e] will not be managed by Spring
[2016-11-18 16:52:50.209] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- selectByExample: ooo Using Connection [oracle.jdbc.driver.T4CConnection@16157d6e]
[2016-11-18 16:52:50.209] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- selectByExample: ==>  Preparing: select ID, BALANCE_DATE, PRE_BALANCE, DAY_DEBTOR_AMOUNT, DAY_CREDITOR_AMOUNT, DAY_CERTIFICATE, END_BALANCE, BANK_BALANCE, DIFF_AMOUNT, CHECK_ACCOUNT_STATUS, MODIFY_TIME, MODIFY_USER_ID, BANK_ID from CAS_BANK_BALANCE_CHECK 
[2016-11-18 16:52:50.209] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- selectByExample: ==> Parameters: 
[2016-11-18 16:52:50.239] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- selectByExample: <==      Total: 41
[2016-11-18 16:52:50.240] log4j - 9748 DEBUG [http-nio-8080-exec-1] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@cd6d6df]
[2016-11-18 16:52:50.248] log4j - 9748  INFO [http-nio-8080-exec-1] --- BankBalanceCheckService: [{"id":"asfgds54646","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7373e0c2c13244f0997f272d2c51e876","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2475a72b478549ada1ca92e288888ebf","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"4146393cdfe04bdb95c2fbc96e90a2f1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5f6187831fae4eaa8f9b1340c26dcc84","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"60bf20e56030414fb1695f94428efbe6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"f5517b0ac31748e9881b899cc0d1208d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5240fbdb0c4049f7b41fde99636512df","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"84894511101445f38cff0933eca0c692","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"25d4ab7e054447189fa98fd58eb51761","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"3d24681ee4d141f69dbc0dc95c134a69","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"cdacaf91c38d4afebbd799b05f7dce63","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"0b66e6af728c4922b1942d378d813ca2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e0c0032ede22433b92f5be78918888d5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6c0420c872314b6c9be2d1565ffeb9f6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7da8d78d867c45699e88a49adb2f5925","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"a50cd7e0dbac4d778076d1b544a5eb07","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"85a7fe0b752e4906bb85a3e8a51d7dcd","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6739d23559cf4c80be845c7d121f740d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9a01d497577845bd8712e44ff61bd8a2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"eb8d6bba8157425b8baeb68a2dee6be5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"453967403fb34889bc54c6dc8718c666","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"538451bdd78b41f5b9ad97b34e8b34fe","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"1726951d0e2645e28ffa7a9554ebefe9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2b233aaae96e48eaa89fda3f23bd652c","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bd472de09b3422f865e8f703d715dc1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9c4416381c8f4970b4722c29734be573","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"c5c63f18872546ea9679f703dbcaa6a6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"8310d176114e430b930b0d3686ddc13d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"56e817bc12ff4788a327219997fce61a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5eb2b9cdcf05424b99768da8fb9e42f9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"be2860df6fb044559586e82e45621680","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"02d8a7dc1aec44189838ebc7341b0872","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"900c3465ace84278b570ee218059d8ec","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bbf374aed4c422d919a269307d0399a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"bd0f1af7dcc8444ba997dd3b1af0aa37","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"509e7c6aff6743d19b8d2d9aae17aa8b","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e802d179b2ff428ab7650752e424446a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"91804019c2b44714a2dc1fb1d317d238","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"813fe9b0f68244e0a86a77d158035bd9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"adc21c95bf5c4224b324874b6b4ca20a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"}]
[2016-11-21 09:43:25.269] log4j - 13444  INFO [main] --- Cmp: Starting Cmp on guoxiaozheng with PID 13444 (E:\guoxiaozheng\sumpay-accountant-service\target\classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-21 09:43:25.273] log4j - 13444 DEBUG [main] --- Cmp: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-21 09:43:26.052] log4j - 13444 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-21 09:43:26.053] log4j - 13444 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-21 09:43:26.053] log4j - 13444 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-21 09:43:26.590] log4j - 13444 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-21 09:43:26.590] log4j - 13444  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-21 09:43:26.607] log4j - 13444 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-21 09:43:26.621] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-21 09:43:26.621] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-21 09:43:26.623] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy27
[2016-11-21 09:43:26.630] log4j - 13444 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-21 09:43:26.635] log4j - 13444 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-21 09:43:26.926] log4j - 13444 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-21 09:43:27.140] log4j - 13444 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-21 09:43:27.782] log4j - 13444  INFO [main] --- StandardService: Starting service Tomcat
[2016-11-21 09:43:27.783] log4j - 13444  INFO [main] --- StandardEngine: Starting Servlet Engine: Apache Tomcat/8.0.23
[2016-11-21 09:43:27.861] log4j - 13444  INFO [localhost-startStop-1] --- [/]: Initializing Spring embedded WebApplicationContext
[2016-11-21 09:43:28.659] log4j - 13444 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-21 09:43:28.659] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-21 09:43:28.659] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-21 09:43:28.659] log4j - 13444 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy27
[2016-11-21 09:43:28.660] log4j - 13444 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-21 09:43:28.660] log4j - 13444 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-21 09:43:29.358] log4j - 13444  INFO [main] --- Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
[2016-11-21 09:43:29.366] log4j - 13444  INFO [main] --- Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
[2016-11-21 09:43:29.384] log4j - 13444  INFO [main] --- NioSelectorPool: Using a shared selector for servlet write/read
[2016-11-21 09:43:29.400] log4j - 13444  INFO [main] --- Cmp: Started Cmp in 4.418 seconds (JVM running for 5.173)
[2016-11-21 11:39:29.728] log4j - 13444  INFO [http-nio-8080-exec-1] --- [/]: Initializing Spring FrameworkServlet 'dispatcherServlet'
[2016-11-22 17:24:56.930] log4j - 1456  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 1456 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-22 17:24:56.938] log4j - 1456 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-22 17:24:57.675] log4j - 1456 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-22 17:24:57.675] log4j - 1456 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-22 17:24:57.676] log4j - 1456 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-22 17:24:57.860] log4j - 1456  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-22 17:24:58.319] log4j - 1456 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-22 17:24:58.319] log4j - 1456  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-22 17:24:58.336] log4j - 1456 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-22 17:24:58.348] log4j - 1456 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-22 17:24:58.349] log4j - 1456 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-22 17:24:58.350] log4j - 1456 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-22 17:24:58.358] log4j - 1456 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-22 17:24:58.362] log4j - 1456 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-22 17:24:58.541] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:24:58.700] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:24:58.712] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:24:59.006] log4j - 1456 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-22 17:24:59.196] log4j - 1456 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-22 17:25:00.277] log4j - 1456  INFO [main] --- TestDubbo: Started TestDubbo in 3.583 seconds (JVM running for 4.119)
[2016-11-22 17:25:00.389] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:00.417] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:00.452] log4j - 1456 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-22 17:25:00.452] log4j - 1456  INFO [ZkClient-EventThread-14-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-22 17:25:00.470] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-22 17:25:00.470] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-22 17:25:00.470] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-22 17:25:00.470] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-22 17:25:00.470] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-22 17:25:00.471] log4j - 1456  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-22 17:25:00.472] log4j - 1456  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@7360b926
[2016-11-22 17:25:00.506] log4j - 1456 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-22 17:25:00.506] log4j - 1456 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-22 17:25:00.510] log4j - 1456  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-22 17:25:00.512] log4j - 1456  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-22 17:25:00.554] log4j - 1456  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-22 17:25:00.554] log4j - 1456  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e632210b4, negotiated timeout = 30000
[2016-11-22 17:25:00.556] log4j - 1456 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-22 17:25:00.556] log4j - 1456  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-22 17:25:00.556] log4j - 1456 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-22 17:25:00.556] log4j - 1456 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-22 17:25:00.562] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:00.571] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:00.577] log4j - 1456  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:00.743] log4j - 1456  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.054] log4j - 1456  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, urls: [dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.086] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.120] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.150] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.202] log4j - 1456  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.208:20807 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x4d4d0430, /192.168.8.66:59111 => /192.168.8.208:20807]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.203] log4j - 1456  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.231] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.239] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.246] log4j - 1456 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.259] log4j - 1456  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.account.connector.AccountManager from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.5.3&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.290] log4j - 1456  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-22 17:25:01.293] log4j - 1456  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.294] log4j - 1456  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=1456&timestamp=1479806700340], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.294] log4j - 1456  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=1456&timestamp=1479806700340, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.294] log4j - 1456  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.298] log4j - 1456  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.300] log4j - 1456  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x4d4d0430, /192.168.8.66:59111 => /192.168.8.208:20807], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.302] log4j - 1456  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.208:20807,url:dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.317] log4j - 1456  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.318] log4j - 1456 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-22 17:25:01.318] log4j - 1456  INFO [ZkClient-EventThread-14-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-22 17:25:01.318] log4j - 1456 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-22 17:25:01.351] log4j - 1456  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e632210b4 closed
[2016-11-22 17:25:01.351] log4j - 1456  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-22 17:25:01.351] log4j - 1456 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-22 17:25:01.351] log4j - 1456  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:01.352] log4j - 1456  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:10.437] log4j - 6212  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 6212 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-22 17:25:10.438] log4j - 6212 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-22 17:25:11.052] log4j - 6212 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-22 17:25:11.052] log4j - 6212 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-22 17:25:11.053] log4j - 6212 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-22 17:25:11.167] log4j - 6212  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-22 17:25:11.478] log4j - 6212 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-22 17:25:11.478] log4j - 6212  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-22 17:25:11.482] log4j - 6212 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-22 17:25:11.488] log4j - 6212 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-22 17:25:11.488] log4j - 6212 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-22 17:25:11.490] log4j - 6212 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-22 17:25:11.493] log4j - 6212 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-22 17:25:11.497] log4j - 6212 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-22 17:25:11.571] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:11.664] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:11.677] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:11.894] log4j - 6212 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-22 17:25:12.013] log4j - 6212 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-22 17:25:12.999] log4j - 6212  INFO [main] --- TestDubbo: Started TestDubbo in 2.733 seconds (JVM running for 3.15)
[2016-11-22 17:25:13.038] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:13.047] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:13.062] log4j - 6212  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.account.connector.AccountManager=dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=1456&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806700297}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:13.071] log4j - 6212 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-22 17:25:13.071] log4j - 6212  INFO [ZkClient-EventThread-14-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-22 17:25:13.077] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-22 17:25:13.078] log4j - 6212  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-22 17:25:13.079] log4j - 6212  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@5d098870
[2016-11-22 17:25:13.100] log4j - 6212 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-22 17:25:13.100] log4j - 6212 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-22 17:25:13.102] log4j - 6212  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-22 17:25:13.105] log4j - 6212  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-22 17:25:13.145] log4j - 6212  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-22 17:25:13.145] log4j - 6212  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e632210b5, negotiated timeout = 30000
[2016-11-22 17:25:13.146] log4j - 6212 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-22 17:25:13.146] log4j - 6212  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-22 17:25:13.146] log4j - 6212 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-22 17:25:13.146] log4j - 6212 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-22 17:25:13.151] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:13.160] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:25:13.166] log4j - 6212  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.301] log4j - 6212  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.604] log4j - 6212  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, urls: [dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.631] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.663] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.674] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.728] log4j - 6212  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.208:20807 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x78d21075, /192.168.8.66:59124 => /192.168.8.208:20807]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.728] log4j - 6212  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.749] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.760] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.769] log4j - 6212 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.779] log4j - 6212  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.account.connector.AccountManager from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.5.3&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.793] log4j - 6212  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-22 17:25:13.795] log4j - 6212  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.795] log4j - 6212  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=6212&timestamp=1479806713032], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.796] log4j - 6212  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=6212&timestamp=1479806713032, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.796] log4j - 6212  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.799] log4j - 6212  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.799] log4j - 6212  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x78d21075, /192.168.8.66:59124 => /192.168.8.208:20807], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.800] log4j - 6212  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.208:20807,url:dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.826] log4j - 6212  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.826] log4j - 6212 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-22 17:25:13.826] log4j - 6212  INFO [ZkClient-EventThread-14-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-22 17:25:13.826] log4j - 6212 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-22 17:25:13.859] log4j - 6212  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e632210b5 closed
[2016-11-22 17:25:13.859] log4j - 6212 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-22 17:25:13.859] log4j - 6212  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-22 17:25:13.859] log4j - 6212  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:25:13.860] log4j - 6212  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:06.141] log4j - 14928  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 14928 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-22 17:27:06.142] log4j - 14928 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-22 17:27:06.801] log4j - 14928 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-22 17:27:06.801] log4j - 14928 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-22 17:27:06.802] log4j - 14928 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-22 17:27:06.923] log4j - 14928  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-22 17:27:07.239] log4j - 14928 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-22 17:27:07.240] log4j - 14928  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-22 17:27:07.245] log4j - 14928 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-22 17:27:07.250] log4j - 14928 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-22 17:27:07.250] log4j - 14928 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-22 17:27:07.252] log4j - 14928 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-22 17:27:07.255] log4j - 14928 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-22 17:27:07.259] log4j - 14928 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-22 17:27:07.336] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:07.429] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:07.444] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:07.677] log4j - 14928 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-22 17:27:07.814] log4j - 14928 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-22 17:27:08.788] log4j - 14928  INFO [main] --- TestDubbo: Started TestDubbo in 2.824 seconds (JVM running for 3.249)
[2016-11-22 17:27:08.833] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:08.843] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:08.861] log4j - 14928  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.account.connector.AccountManager=dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=6212&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806713004}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:08.878] log4j - 14928 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-22 17:27:08.878] log4j - 14928  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-22 17:27:08.884] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-22 17:27:08.890] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-22 17:27:08.891] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-22 17:27:08.891] log4j - 14928  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-22 17:27:08.891] log4j - 14928  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@630a4dab
[2016-11-22 17:27:08.916] log4j - 14928 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-22 17:27:08.917] log4j - 14928 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-22 17:27:08.920] log4j - 14928  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-22 17:27:08.923] log4j - 14928  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-22 17:27:08.957] log4j - 14928  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-22 17:27:08.958] log4j - 14928  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e632210b6, negotiated timeout = 30000
[2016-11-22 17:27:08.959] log4j - 14928 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-22 17:27:08.959] log4j - 14928  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-22 17:27:08.959] log4j - 14928 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-22 17:27:08.959] log4j - 14928 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-22 17:27:08.966] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:08.975] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-22 17:27:08.983] log4j - 14928  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.122] log4j - 14928  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.433] log4j - 14928  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, urls: [dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.462] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.503] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.514] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.573] log4j - 14928  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.208:20807 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x43dc9903, /192.168.8.66:59159 => /192.168.8.208:20807]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.574] log4j - 14928  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.595] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.604] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.612] log4j - 14928 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:09.622] log4j - 14928  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.account.connector.AccountManager from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.5.3&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:29.552] log4j - 14928  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-22 17:27:47.673] log4j - 14928  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.678] log4j - 14928  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=14928&timestamp=1479806828826], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.679] log4j - 14928  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=14928&timestamp=1479806828826, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.679] log4j - 14928  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.686] log4j - 14928  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.687] log4j - 14928  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x43dc9903, /192.168.8.66:59159 => /192.168.8.208:20807], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.689] log4j - 14928  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.208:20807,url:dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=14928&retries=0&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.729] log4j - 14928  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.729] log4j - 14928 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-22 17:27:47.729] log4j - 14928  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-22 17:27:47.730] log4j - 14928 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-22 17:27:47.762] log4j - 14928  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e632210b6 closed
[2016-11-22 17:27:47.762] log4j - 14928  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-22 17:27:47.762] log4j - 14928 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-22 17:27:47.762] log4j - 14928  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-22 17:27:47.762] log4j - 14928  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.208:20807, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:15.528] log4j - 34336  INFO [main] --- Cmp: Starting Cmp on guoxiaozheng with PID 34336 (E:\guoxiaozheng\sumpay-accountant-service\target\classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:13:15.529] log4j - 34336 DEBUG [main] --- Cmp: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:13:16.413] log4j - 34336 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:13:16.413] log4j - 34336 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:13:16.414] log4j - 34336 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:13:16.582] log4j - 34336  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:13:17.189] log4j - 34336 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:13:17.190] log4j - 34336  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:13:17.206] log4j - 34336 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:13:17.220] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:13:17.220] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:13:17.221] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-25 16:13:17.230] log4j - 34336 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:13:17.235] log4j - 34336 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:13:17.357] log4j - 34336 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:17.498] log4j - 34336 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:17.524] log4j - 34336 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:17.800] log4j - 34336 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:13:17.999] log4j - 34336 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:13:18.591] log4j - 34336  INFO [main] --- StandardService: Starting service Tomcat
[2016-11-25 16:13:18.592] log4j - 34336  INFO [main] --- StandardEngine: Starting Servlet Engine: Apache Tomcat/8.0.23
[2016-11-25 16:13:18.705] log4j - 34336  INFO [localhost-startStop-1] --- [/]: Initializing Spring embedded WebApplicationContext
[2016-11-25 16:13:19.605] log4j - 34336 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:13:19.606] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:13:19.606] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:13:19.606] log4j - 34336 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-25 16:13:19.606] log4j - 34336 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:13:19.607] log4j - 34336 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:13:20.493] log4j - 34336  INFO [main] --- Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
[2016-11-25 16:13:20.500] log4j - 34336  INFO [main] --- Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
[2016-11-25 16:13:20.514] log4j - 34336  INFO [main] --- NioSelectorPool: Using a shared selector for servlet write/read
[2016-11-25 16:13:20.538] log4j - 34336  INFO [main] --- Cmp: Started Cmp in 5.273 seconds (JVM running for 5.764)
[2016-11-25 16:13:40.834] log4j - 9548  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 9548 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:13:40.835] log4j - 9548 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:13:41.494] log4j - 9548 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:13:41.495] log4j - 9548 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:13:41.496] log4j - 9548 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:13:41.620] log4j - 9548  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:13:41.963] log4j - 9548 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:13:41.963] log4j - 9548  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:13:41.967] log4j - 9548 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:13:41.973] log4j - 9548 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:13:41.973] log4j - 9548 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:13:41.975] log4j - 9548 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:13:41.980] log4j - 9548 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:13:41.984] log4j - 9548 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:13:42.059] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:42.157] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:42.170] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:42.404] log4j - 9548 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:13:42.545] log4j - 9548 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:13:43.525] log4j - 9548  INFO [main] --- TestDubbo: Started TestDubbo in 2.87 seconds (JVM running for 3.394)
[2016-11-25 16:13:43.590] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:43.600] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:43.629] log4j - 9548  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.account.connector.AccountManager=dubbo://192.168.8.208:20807/cn.sumpay.account.connector.AccountManager?anyhost=true&application=account&default.actives=1000&default.executes=1000&default.timeout=20000&default.token=false&dubbo=2.4.10&executes=200&interface=cn.sumpay.account.connector.AccountManager&loadbalance=roundrobin&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,queryAccStatement,openPlaformAccount,openPersonAccount,queryAccDetailById,queryCashBalance,openCompanyAccount,selectAccInfByUserId&pid=27526&retries=0&revision=1.0.50-SNAPSHOT&side=provider&threads=200&timestamp=1476934695813 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=14928&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1479806828793}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:43.647] log4j - 9548 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:13:43.647] log4j - 9548  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:13:43.654] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:13:43.655] log4j - 9548  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:13:43.656] log4j - 9548  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@e6e852c
[2016-11-25 16:13:43.681] log4j - 9548 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:13:43.681] log4j - 9548 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:13:43.685] log4j - 9548  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:13:43.688] log4j - 9548  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:13:43.708] log4j - 9548  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:13:43.709] log4j - 9548  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221294, negotiated timeout = 30000
[2016-11-25 16:13:43.710] log4j - 9548 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:13:43.710] log4j - 9548  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:13:43.710] log4j - 9548 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:13:43.710] log4j - 9548 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:13:43.727] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:43.736] log4j - 9548 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:13:43.744] log4j - 9548  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.788] log4j - 9548  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.884] log4j - 9548  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, urls: [empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.888] log4j - 9548 ERROR [main] --- TestContextManager: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@2cbe2f15] to prepare test instance [TestDubbo@7a0522a5]
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'TestDubbo': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.account.connector.AccountManager TestDubbo.accountManager; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:385)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:200)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:259)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:261)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:219)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.account.connector.AccountManager TestDubbo.accountManager; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	... 26 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:175)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:251)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	... 28 more
Caused by: java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:420)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:300)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:138)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:65)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:168)
	... 36 more
[2016-11-25 16:13:43.916] log4j - 9548  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.916] log4j - 9548  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=9548&timestamp=1480061623583], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.917] log4j - 9548  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=9548&timestamp=1480061623583, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.917] log4j - 9548  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.930] log4j - 9548  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.930] log4j - 9548  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.931] log4j - 9548  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unsubscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:13:43.931] log4j - 9548 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:13:43.931] log4j - 9548  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:13:43.931] log4j - 9548 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:13:43.938] log4j - 9548  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221294 closed
[2016-11-25 16:13:43.938] log4j - 9548 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:13:43.938] log4j - 9548  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:14:54.169] log4j - 35364  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 35364 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:14:54.171] log4j - 35364 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:14:54.830] log4j - 35364 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:14:54.830] log4j - 35364 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:14:54.831] log4j - 35364 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:14:54.954] log4j - 35364  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:14:55.282] log4j - 35364 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:14:55.282] log4j - 35364  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:14:55.286] log4j - 35364 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:14:55.291] log4j - 35364 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:14:55.292] log4j - 35364 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:14:55.293] log4j - 35364 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:14:55.296] log4j - 35364 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:14:55.301] log4j - 35364 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:14:55.379] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:55.473] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:55.485] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:55.722] log4j - 35364 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:14:55.857] log4j - 35364 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:14:56.828] log4j - 35364  INFO [main] --- TestDubbo: Started TestDubbo in 2.838 seconds (JVM running for 3.3)
[2016-11-25 16:14:56.872] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:56.882] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:56.897] log4j - 35364  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.account.connector.AccountManager=empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=9548&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061623551}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:56.909] log4j - 35364 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:14:56.909] log4j - 35364  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:14:56.915] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:14:56.916] log4j - 35364  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:14:56.917] log4j - 35364  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@52c62ad9
[2016-11-25 16:14:56.940] log4j - 35364 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:14:56.940] log4j - 35364 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:14:56.942] log4j - 35364  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:14:56.945] log4j - 35364  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:14:56.963] log4j - 35364  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:14:56.963] log4j - 35364  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221295, negotiated timeout = 30000
[2016-11-25 16:14:56.965] log4j - 35364 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:14:56.965] log4j - 35364  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:14:56.965] log4j - 35364 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:14:56.965] log4j - 35364 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:14:56.970] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:56.978] log4j - 35364 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:14:56.986] log4j - 35364  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.043] log4j - 35364  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.356] log4j - 35364  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, urls: [empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.365] log4j - 35364 ERROR [main] --- TestContextManager: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@10805ac7] to prepare test instance [TestDubbo@5ac7c747]
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'TestDubbo': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.account.connector.AccountManager TestDubbo.accountManager; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:385)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:200)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:259)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:261)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:219)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.account.connector.AccountManager TestDubbo.accountManager; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	... 26 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountManager': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:175)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:251)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	... 28 more
Caused by: java.lang.IllegalStateException: Failed to check the status of the service cn.sumpay.account.connector.AccountManager. No provider available for the service cn.sumpay.account.connector.AccountManager from the url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 to the consumer 192.168.8.66 use dubbo version 2.5.3
	at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:420)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:300)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:138)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:65)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:168)
	... 36 more
[2016-11-25 16:14:57.380] log4j - 35364  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.381] log4j - 35364  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=35364&timestamp=1480061696865], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.381] log4j - 35364  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=35364&timestamp=1480061696865, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.381] log4j - 35364  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.418] log4j - 35364  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.418] log4j - 35364  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.419] log4j - 35364  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unsubscribe url consumer://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:14:57.419] log4j - 35364 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:14:57.419] log4j - 35364  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:14:57.419] log4j - 35364 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:14:57.451] log4j - 35364  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221295 closed
[2016-11-25 16:14:57.451] log4j - 35364  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:14:57.451] log4j - 35364 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:20:15.664] log4j - 35832  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 35832 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:20:15.666] log4j - 35832 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:20:16.357] log4j - 35832 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:20:16.357] log4j - 35832 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:20:16.358] log4j - 35832 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:20:16.482] log4j - 35832  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:20:16.809] log4j - 35832 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:20:16.809] log4j - 35832  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:20:16.815] log4j - 35832 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:20:16.820] log4j - 35832 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:20:16.821] log4j - 35832 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:20:16.822] log4j - 35832 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:20:16.825] log4j - 35832 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:20:16.831] log4j - 35832 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:20:16.912] log4j - 35832 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:17.007] log4j - 35832 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:17.021] log4j - 35832 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:17.277] log4j - 35832 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:20:17.401] log4j - 35832 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:20:18.371] log4j - 35832  INFO [main] --- TestDubbo: Started TestDubbo in 2.888 seconds (JVM running for 3.373)
[2016-11-25 16:20:18.374] log4j - 35832 ERROR [main] --- TestContextManager: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@432f0a33] to prepare test instance [TestDubbo@4546bcba]
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'TestDubbo': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.accountant.extservice.AccountSubjectService TestDubbo.accountSubjectService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:385)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:200)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:259)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:261)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:219)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.accountant.extservice.AccountSubjectService TestDubbo.accountSubjectService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	... 26 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1301)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1047)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	... 28 more
[2016-11-25 16:20:18.384] log4j - 35832  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:18.386] log4j - 35832  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [], dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:45.391] log4j - 24500  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 24500 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:20:45.392] log4j - 24500 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:20:46.106] log4j - 24500 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:20:46.106] log4j - 24500 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:20:46.107] log4j - 24500 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:20:46.244] log4j - 24500  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:20:46.603] log4j - 24500 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:20:46.603] log4j - 24500  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:20:46.608] log4j - 24500 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:20:46.615] log4j - 24500 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:20:46.615] log4j - 24500 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:20:46.616] log4j - 24500 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:20:46.620] log4j - 24500 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:20:46.626] log4j - 24500 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:20:46.710] log4j - 24500 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:46.811] log4j - 24500 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:46.825] log4j - 24500 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:47.081] log4j - 24500 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:20:47.202] log4j - 24500 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:20:48.185] log4j - 24500  INFO [main] --- TestDubbo: Started TestDubbo in 2.979 seconds (JVM running for 3.445)
[2016-11-25 16:20:48.189] log4j - 24500 ERROR [main] --- TestContextManager: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@40d48fd5] to prepare test instance [TestDubbo@432f0a33]
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'TestDubbo': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.accountant.extservice.AccountSubjectService TestDubbo.accountSubjectService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:385)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:200)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:259)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:261)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:219)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: cn.sumpay.accountant.extservice.AccountSubjectService TestDubbo.accountSubjectService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	... 26 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [cn.sumpay.accountant.extservice.AccountSubjectService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1301)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1047)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	... 28 more
[2016-11-25 16:20:48.197] log4j - 24500  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:20:48.199] log4j - 24500  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [], dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:05.919] log4j - 16020  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 16020 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:22:05.921] log4j - 16020 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:22:06.586] log4j - 16020 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:22:06.586] log4j - 16020 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:22:06.587] log4j - 16020 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:22:06.712] log4j - 16020  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:22:07.045] log4j - 16020 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:22:07.045] log4j - 16020  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:22:07.050] log4j - 16020 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:22:07.055] log4j - 16020 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:22:07.056] log4j - 16020 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:22:07.057] log4j - 16020 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:22:07.061] log4j - 16020 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:22:07.065] log4j - 16020 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:22:07.146] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:07.241] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:07.255] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:07.502] log4j - 16020 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:22:07.626] log4j - 16020 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:22:08.590] log4j - 16020  INFO [main] --- TestDubbo: Started TestDubbo in 2.849 seconds (JVM running for 3.323)
[2016-11-25 16:22:08.624] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:08.635] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:08.649] log4j - 16020  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.account.connector.AccountManager=empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:08.665] log4j - 16020 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:22:08.665] log4j - 16020  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:22:08.671] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:22:08.672] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:22:08.672] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:22:08.672] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:22:08.672] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:22:08.672] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\cn\sumpay\sumpay-accountant-api\1.0.4-SNAPSHOT\sumpay-accountant-api-1.0.4-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:22:08.673] log4j - 16020  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:22:08.674] log4j - 16020  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@30097a3f
[2016-11-25 16:22:08.695] log4j - 16020 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:22:08.695] log4j - 16020 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:22:08.698] log4j - 16020  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:22:08.701] log4j - 16020  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:22:08.720] log4j - 16020  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:22:08.720] log4j - 16020  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221296, negotiated timeout = 30000
[2016-11-25 16:22:08.721] log4j - 16020 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:22:08.721] log4j - 16020  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:22:08.722] log4j - 16020 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:22:08.722] log4j - 16020 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:22:08.727] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:08.736] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:22:08.743] log4j - 16020  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:08.777] log4j - 16020  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:08.887] log4j - 16020  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, urls: [dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494, dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:08.937] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:08.973] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:08.987] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.046] log4j - 16020  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.160:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x1f783c7e, /192.168.8.66:51531 => /192.168.8.160:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.046] log4j - 16020  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.065] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.074] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.083] log4j - 16020 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.095] log4j - 16020  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.209:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x4294cd2e, /192.168.8.66:51536 => /192.168.8.209:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.095] log4j - 16020  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:09.101] log4j - 16020  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.accountant.extservice.AccountSubjectService from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.5.3&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.724] log4j - 16020  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-25 16:22:15.730] log4j - 16020  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.738] log4j - 16020  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=16020&timestamp=1480062128618], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.738] log4j - 16020  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=16020&timestamp=1480062128618, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.738] log4j - 16020  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.749] log4j - 16020  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.751] log4j - 16020  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x4294cd2e, /192.168.8.66:51536 => /192.168.8.209:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.753] log4j - 16020  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.209:20806,url:dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.754] log4j - 16020  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x1f783c7e, /192.168.8.66:51531 => /192.168.8.160:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.755] log4j - 16020  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.160:20806,url:dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.760] log4j - 16020  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.760] log4j - 16020 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:22:15.761] log4j - 16020  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:22:15.761] log4j - 16020 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:22:15.768] log4j - 16020  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:22:15.768] log4j - 16020  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221296 closed
[2016-11-25 16:22:15.768] log4j - 16020 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:22:15.768] log4j - 16020  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.768] log4j - 16020  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.769] log4j - 16020  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:22:15.769] log4j - 16020  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:13.277] log4j - 11324  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 11324 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:23:13.279] log4j - 11324 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:23:13.974] log4j - 11324 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:23:13.974] log4j - 11324 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:23:13.975] log4j - 11324 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:23:14.103] log4j - 11324  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:23:14.455] log4j - 11324 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:23:14.455] log4j - 11324  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:23:14.460] log4j - 11324 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:23:14.465] log4j - 11324 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:23:14.465] log4j - 11324 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:23:14.467] log4j - 11324 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:23:14.471] log4j - 11324 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:23:14.474] log4j - 11324 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:23:14.569] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:14.664] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:14.678] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:14.938] log4j - 11324 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:23:15.063] log4j - 11324 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:23:16.019] log4j - 11324  INFO [main] --- TestDubbo: Started TestDubbo in 2.926 seconds (JVM running for 3.394)
[2016-11-25 16:23:16.055] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:16.065] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:16.081] log4j - 11324  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.accountant.extservice.AccountSubjectService=dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494 dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=16020&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062128595, cn.sumpay.account.connector.AccountManager=empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:16.093] log4j - 11324 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:23:16.093] log4j - 11324  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:23:16.101] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:23:16.101] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:23:16.101] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:23:16.101] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:23:16.101] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\cn\sumpay\sumpay-accountant-api\1.0.4-SNAPSHOT\sumpay-accountant-api-1.0.4-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:23:16.102] log4j - 11324  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:23:16.103] log4j - 11324  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@5829dade
[2016-11-25 16:23:16.126] log4j - 11324 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:23:16.126] log4j - 11324 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:23:16.128] log4j - 11324  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:23:16.131] log4j - 11324  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:23:16.229] log4j - 11324  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:23:16.229] log4j - 11324  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221297, negotiated timeout = 30000
[2016-11-25 16:23:16.232] log4j - 11324 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:23:16.232] log4j - 11324  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:23:16.232] log4j - 11324 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:23:16.232] log4j - 11324 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:23:16.240] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:16.253] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:23:16.260] log4j - 11324  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.324] log4j - 11324  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.653] log4j - 11324  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, urls: [dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494, dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.681] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.724] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.737] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.802] log4j - 11324  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.160:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x5bf3e277, /192.168.8.66:51593 => /192.168.8.160:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.803] log4j - 11324  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.823] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.831] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.838] log4j - 11324 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.851] log4j - 11324  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.209:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x4343c625, /192.168.8.66:51598 => /192.168.8.209:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.851] log4j - 11324  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:16.857] log4j - 11324  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.accountant.extservice.AccountSubjectService from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.5.3&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.180] log4j - 11324  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-25 16:23:25.189] log4j - 11324  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.191] log4j - 11324  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=11324&timestamp=1480062196049], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.191] log4j - 11324  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=11324&timestamp=1480062196049, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.192] log4j - 11324  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.201] log4j - 11324  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.204] log4j - 11324  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x5bf3e277, /192.168.8.66:51593 => /192.168.8.160:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.206] log4j - 11324  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.160:20806,url:dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.208] log4j - 11324  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x4343c625, /192.168.8.66:51598 => /192.168.8.209:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.209] log4j - 11324  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.209:20806,url:dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.232] log4j - 11324  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.232] log4j - 11324 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:23:25.232] log4j - 11324  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:23:25.232] log4j - 11324 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:23:25.265] log4j - 11324  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221297 closed
[2016-11-25 16:23:25.265] log4j - 11324  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:23:25.265] log4j - 11324 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:23:25.266] log4j - 11324  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.266] log4j - 11324  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.266] log4j - 11324  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:23:25.266] log4j - 11324  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:01.970] log4j - 6804  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 6804 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:24:01.971] log4j - 6804 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:24:02.695] log4j - 6804 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:24:02.696] log4j - 6804 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:24:02.697] log4j - 6804 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:24:02.823] log4j - 6804  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:24:03.156] log4j - 6804 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:24:03.156] log4j - 6804  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:24:03.161] log4j - 6804 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:24:03.167] log4j - 6804 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:24:03.167] log4j - 6804 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:24:03.168] log4j - 6804 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:24:03.172] log4j - 6804 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:24:03.176] log4j - 6804 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:24:03.257] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:03.353] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:03.366] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:03.610] log4j - 6804 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:24:03.736] log4j - 6804 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:24:04.755] log4j - 6804  INFO [main] --- TestDubbo: Started TestDubbo in 2.978 seconds (JVM running for 3.445)
[2016-11-25 16:24:04.797] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:04.812] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:04.829] log4j - 6804  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.accountant.extservice.AccountSubjectService=dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494 dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=11324&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062196024, cn.sumpay.account.connector.AccountManager=empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:04.844] log4j - 6804 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:24:04.847] log4j - 6804  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:24:04.854] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\cn\sumpay\sumpay-accountant-api\1.0.4-SNAPSHOT\sumpay-accountant-api-1.0.4-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:24:04.855] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:24:04.856] log4j - 6804  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:24:04.857] log4j - 6804  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@2052c9cf
[2016-11-25 16:24:04.882] log4j - 6804 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:24:04.882] log4j - 6804 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:24:04.886] log4j - 6804  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:24:04.889] log4j - 6804  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:24:04.908] log4j - 6804  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:24:04.908] log4j - 6804  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221298, negotiated timeout = 30000
[2016-11-25 16:24:04.909] log4j - 6804 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:24:04.909] log4j - 6804  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:24:04.910] log4j - 6804 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:24:04.910] log4j - 6804 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:24:04.915] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:04.924] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:04.932] log4j - 6804  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:04.981] log4j - 6804  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.067] log4j - 6804  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, urls: [dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494, dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.092] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.130] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.143] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.203] log4j - 6804  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.160:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x7c351cbd, /192.168.8.66:51637 => /192.168.8.160:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.203] log4j - 6804  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.222] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.230] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.238] log4j - 6804 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.251] log4j - 6804  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.209:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x5c1be6a0, /192.168.8.66:51642 => /192.168.8.209:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.251] log4j - 6804  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:05.257] log4j - 6804  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.accountant.extservice.AccountSubjectService from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.5.3&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.822] log4j - 6804  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-25 16:24:13.833] log4j - 6804  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.837] log4j - 6804  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=6804&timestamp=1480062244789], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.837] log4j - 6804  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=6804&timestamp=1480062244789, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.840] log4j - 6804  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.844] log4j - 6804  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.845] log4j - 6804  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x7c351cbd, /192.168.8.66:51637 => /192.168.8.160:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.847] log4j - 6804  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.160:20806,url:dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.848] log4j - 6804  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x5c1be6a0, /192.168.8.66:51642 => /192.168.8.209:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.848] log4j - 6804  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.209:20806,url:dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.863] log4j - 6804  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.864] log4j - 6804 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:24:13.864] log4j - 6804  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:24:13.864] log4j - 6804 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:24:13.872] log4j - 6804  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221298 closed
[2016-11-25 16:24:13.872] log4j - 6804  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:24:13.872] log4j - 6804 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:24:13.872] log4j - 6804  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.873] log4j - 6804  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.873] log4j - 6804  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:13.873] log4j - 6804  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:30.301] log4j - 35100  INFO [main] --- TestDubbo: Starting TestDubbo on guoxiaozheng with PID 35100 (E:\guoxiaozheng\sumpay-accountant-service\target\test-classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:24:30.303] log4j - 35100 DEBUG [main] --- TestDubbo: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:24:30.979] log4j - 35100 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:24:30.980] log4j - 35100 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:24:30.981] log4j - 35100 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:24:31.104] log4j - 35100  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:24:31.430] log4j - 35100 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:24:31.430] log4j - 35100  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:24:31.435] log4j - 35100 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:24:31.441] log4j - 35100 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:24:31.441] log4j - 35100 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:24:31.443] log4j - 35100 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy32
[2016-11-25 16:24:31.446] log4j - 35100 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:24:31.450] log4j - 35100 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:24:31.527] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:31.622] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:31.637] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:31.879] log4j - 35100 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:24:31.998] log4j - 35100 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:24:32.961] log4j - 35100  INFO [main] --- TestDubbo: Started TestDubbo in 2.837 seconds (JVM running for 3.303)
[2016-11-25 16:24:32.996] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:33.006] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:33.021] log4j - 35100  INFO [main] --- ZookeeperRegistry:  [DUBBO] Load registry store file C:\Users\Administrator\.dubbo\dubbo-registry-192.168.8.217.cache, data: {cn.sumpay.accountant.extservice.AccountSubjectService=dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494 dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761 empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=6804&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062244761, cn.sumpay.account.connector.AccountManager=empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=providers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833 empty://192.168.8.66/cn.sumpay.account.connector.AccountManager?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.account.connector.AccountManager&methods=openAccount,modifyAccStatusByAccNo,openComPlaformAccount,lotteryCallBack,modifyAccStatus,queryLotteryBalance,queryAccDetail,openCashDepositAccInf,openPlaformAccount,queryAccStatement,openPersonAccount,queryAccDetailById,openCompanyAccount,queryCashBalance,selectAccInfByUserId&pid=35364&revision=1.0.49-SNAPSHOT&side=consumer&timestamp=1480061696833}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:33.033] log4j - 35100 DEBUG [main] --- ZkConnection: Creating new ZookKeeper instance to connect to 192.168.8.217:2181.
[2016-11-25 16:24:33.033] log4j - 35100  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Starting ZkClient event thread.
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:host.name=guoxiaozheng
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.version=1.7.0_67
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.vendor=Oracle Corporation
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.home=C:\Program Files\Java\jdk1.7.0_67\jre
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.class.path=E:\guoxiaozheng\sumpay-accountant-service\target\test-classes;E:\guoxiaozheng\sumpay-accountant-service\target\classes;G:\Maven\repository\cn\sumpay\sumpay-account-api\1.0.49-SNAPSHOT\sumpay-account-api-1.0.49-SNAPSHOT.jar;G:\Maven\repository\cn\sumpay\sumpay-accountant-api\1.0.4-SNAPSHOT\sumpay-accountant-api-1.0.4-SNAPSHOT.jar;G:\Maven\repository\com\alibaba\dubbo\2.5.3\dubbo-2.5.3.jar;G:\Maven\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;G:\Maven\repository\org\jboss\netty\netty\3.2.5.Final\netty-3.2.5.Final.jar;G:\Maven\repository\org\apache\zookeeper\zookeeper\3.4.6\zookeeper-3.4.6.jar;G:\Maven\repository\org\slf4j\slf4j-api\1.7.12\slf4j-api-1.7.12.jar;G:\Maven\repository\jline\jline\0.9.94\jline-0.9.94.jar;G:\Maven\repository\io\netty\netty\3.7.0.Final\netty-3.7.0.Final.jar;G:\Maven\repository\com\github\sgroschupf\zkclient\0.1\zkclient-0.1.jar;G:\Maven\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;G:\Maven\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar;G:\Maven\repository\com\alibaba\druid\1.0.5\druid-1.0.5.jar;E:\guoxiaozheng\sumpay-account\target\classes;G:\Maven\repository\com\google\code\gson\gson\2.3.1\gson-2.3.1.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-actuator\1.2.5.RELEASE\spring-boot-starter-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter\1.2.5.RELEASE\spring-boot-starter-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot\1.2.5.RELEASE\spring-boot-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\1.2.5.RELEASE\spring-boot-autoconfigure-1.2.5.RELEASE.jar;G:\Maven\repository\org\yaml\snakeyaml\1.14\snakeyaml-1.14.jar;G:\Maven\repository\org\springframework\boot\spring-boot-actuator\1.2.5.RELEASE\spring-boot-actuator-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-context\4.1.7.RELEASE\spring-context-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-core\4.1.7.RELEASE\spring-core-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-log4j\1.2.5.RELEASE\spring-boot-starter-log4j-1.2.5.RELEASE.jar;G:\Maven\repository\org\slf4j\jcl-over-slf4j\1.7.12\jcl-over-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\jul-to-slf4j\1.7.12\jul-to-slf4j-1.7.12.jar;G:\Maven\repository\org\slf4j\slf4j-log4j12\1.7.12\slf4j-log4j12-1.7.12.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-jdbc\1.2.5.RELEASE\spring-boot-starter-jdbc-1.2.5.RELEASE.jar;G:\Maven\repository\org\springframework\spring-jdbc\4.1.7.RELEASE\spring-jdbc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-beans\4.1.7.RELEASE\spring-beans-4.1.7.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\tomcat-jdbc\8.0.23\tomcat-jdbc-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\tomcat-juli\8.0.23\tomcat-juli-8.0.23.jar;G:\Maven\repository\org\springframework\spring-tx\4.1.7.RELEASE\spring-tx-4.1.7.RELEASE.jar;G:\Maven\repository\org\mybatis\mybatis\3.2.3\mybatis-3.2.3.jar;G:\Maven\repository\org\mybatis\mybatis-spring\1.2.2\mybatis-spring-1.2.2.jar;G:\Maven\repository\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-web\1.2.5.RELEASE\spring-boot-starter-web-1.2.5.RELEASE.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-databind\2.4.6\jackson-databind-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-annotations\2.4.6\jackson-annotations-2.4.6.jar;G:\Maven\repository\com\fasterxml\jackson\core\jackson-core\2.4.6\jackson-core-2.4.6.jar;G:\Maven\repository\org\hibernate\hibernate-validator\5.1.3.Final\hibernate-validator-5.1.3.Final.jar;G:\Maven\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;G:\Maven\repository\org\jboss\logging\jboss-logging\3.1.3.GA\jboss-logging-3.1.3.GA.jar;G:\Maven\repository\com\fasterxml\classmate\1.0.0\classmate-1.0.0.jar;G:\Maven\repository\org\springframework\spring-web\4.1.7.RELEASE\spring-web-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-aop\4.1.7.RELEASE\spring-aop-4.1.7.RELEASE.jar;G:\Maven\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;G:\Maven\repository\org\springframework\spring-webmvc\4.1.7.RELEASE\spring-webmvc-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\spring-expression\4.1.7.RELEASE\spring-expression-4.1.7.RELEASE.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-tomcat\1.2.5.RELEASE\spring-boot-starter-tomcat-1.2.5.RELEASE.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-core\8.0.23\tomcat-embed-core-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-el\8.0.23\tomcat-embed-el-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.23\tomcat-embed-logging-juli-8.0.23.jar;G:\Maven\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.0.23\tomcat-embed-websocket-8.0.23.jar;G:\Maven\repository\org\springframework\boot\spring-boot-starter-test\1.2.5.RELEASE\spring-boot-starter-test-1.2.5.RELEASE.jar;G:\Maven\repository\junit\junit\4.12\junit-4.12.jar;G:\Maven\repository\org\mockito\mockito-core\1.10.19\mockito-core-1.10.19.jar;G:\Maven\repository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;G:\Maven\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;G:\Maven\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;G:\Maven\repository\org\springframework\spring-test\4.1.7.RELEASE\spring-test-4.1.7.RELEASE.jar;/D:/soft/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/D:/soft/eclipse/configuration/org.eclipse.osgi/361/0/.cp/
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.library.path=C:\Program Files\Java\jdk1.7.0_67\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jdk1.7.0_67/jre/bin/server;C:/Program Files/Java/jdk1.7.0_67/jre/bin;C:/Program Files/Java/jdk1.7.0_67/jre/lib/amd64;G:\oraclexe\app\oracle\product\10.2.0\server\bin; C:\Program Files\Java\jdk1.7.0_67\bin;C:\Program Files\Java\jdk1.7.0_67\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\soft\apache-maven-3.2.5\bin;d:\Program Files\Git\cmd;C:\Program Files\TortoiseSVN\bin;D:\soft\eclipse;;.
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:java.compiler=<NA>
[2016-11-25 16:24:33.039] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:os.name=Windows 7
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:os.arch=amd64
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:os.version=6.1
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:user.name=Administrator
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:user.home=C:\Users\Administrator
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Client environment:user.dir=E:\guoxiaozheng\sumpay-accountant-service
[2016-11-25 16:24:33.040] log4j - 35100  INFO [main] --- ZooKeeper: Initiating client connection, connectString=192.168.8.217:2181 sessionTimeout=30000 watcher=org.I0Itec.zkclient.ZkClient@6f0dc842
[2016-11-25 16:24:33.061] log4j - 35100 DEBUG [main] --- ZkClient: Awaiting connection to Zookeeper server
[2016-11-25 16:24:33.061] log4j - 35100 DEBUG [main] --- ZkClient: Waiting for keeper state SyncConnected
[2016-11-25 16:24:33.065] log4j - 35100  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Opening socket connection to server 192.168.8.217/192.168.8.217:2181. Will not attempt to authenticate using SASL (unknown error)
[2016-11-25 16:24:33.067] log4j - 35100  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Socket connection established to 192.168.8.217/192.168.8.217:2181, initiating session
[2016-11-25 16:24:33.090] log4j - 35100  WARN [main-SendThread(192.168.8.217:2181)] --- ClientCnxnSocket: Connected to an old server; r-o mode will be unavailable
[2016-11-25 16:24:33.090] log4j - 35100  INFO [main-SendThread(192.168.8.217:2181)] --- ClientCnxn: Session establishment complete on server 192.168.8.217/192.168.8.217:2181, sessionid = 0x157c26e63221299, negotiated timeout = 30000
[2016-11-25 16:24:33.092] log4j - 35100 DEBUG [main-EventThread] --- ZkClient: Received event: WatchedEvent state:SyncConnected type:None path:null
[2016-11-25 16:24:33.092] log4j - 35100  INFO [main-EventThread] --- ZkClient: zookeeper state changed (SyncConnected)
[2016-11-25 16:24:33.092] log4j - 35100 DEBUG [main-EventThread] --- ZkClient: Leaving process event
[2016-11-25 16:24:33.092] log4j - 35100 DEBUG [main] --- ZkClient: State is SyncConnected
[2016-11-25 16:24:33.097] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:33.106] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:24:33.115] log4j - 35100  INFO [main] --- ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.163] log4j - 35100  INFO [main] --- ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.400] log4j - 35100  INFO [main] --- ZookeeperRegistry:  [DUBBO] Notify urls for subscribe url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, urls: [dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=4548&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480057743494, dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=accmanage&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=8102&retries=0&revision=1.0.4-SNAPSHOT&side=provider&threads=200&timestamp=1480060283626, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=configurators&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, empty://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.424] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.460] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.472] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.530] log4j - 35100  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.160:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x2a9e0714, /192.168.8.66:51665 => /192.168.8.160:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.530] log4j - 35100  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.552] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.561] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.568] log4j - 35100 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.577] log4j - 35100  INFO [main] --- AbstractClient:  [DUBBO] Successed connect to server /192.168.8.209:20806 from NettyClient 192.168.8.66 using dubbo version 2.5.3, channel is NettyChannel [channel=[id: 0x2dc584da, /192.168.8.66:51670 => /192.168.8.209:20806]], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.578] log4j - 35100  INFO [main] --- AbstractClient:  [DUBBO] Start NettyClient guoxiaozheng/192.168.8.66 connect to the server /192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:33.585] log4j - 35100  INFO [main] --- AbstractConfig:  [DUBBO] Refer dubbo service cn.sumpay.accountant.extservice.AccountSubjectService from url zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-consumer&check=false&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.5.3&executes=200&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.917] log4j - 35100  INFO [main] --- TestDubbo: Springboot接入DUBBO，获取代理类名字：com.alibaba.dubbo.common.bytecode.proxy0
[2016-11-25 16:24:56.920] log4j - 35100  INFO [DubboShutdownHook] --- AbstractConfig:  [DUBBO] Run shutdown hook now., dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.921] log4j - 35100  INFO [DubboShutdownHook] --- AbstractRegistryFactory:  [DUBBO] Close all registries [zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=35100&timestamp=1480062272990], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.921] log4j - 35100  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy registry:zookeeper://192.168.8.217:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo-consumer&dubbo=2.5.3&interface=com.alibaba.dubbo.registry.RegistryService&pid=35100&timestamp=1480062272990, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.921] log4j - 35100  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Unregister: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.926] log4j - 35100  INFO [Thread-1] --- ZookeeperRegistry:  [DUBBO] Unsubscribe: consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=providers,configurators,routers&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.926] log4j - 35100  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x2a9e0714, /192.168.8.66:51665 => /192.168.8.160:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.928] log4j - 35100  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.160:20806,url:dubbo://192.168.8.160:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.929] log4j - 35100  INFO [Thread-1] --- NettyChannel:  [DUBBO] Close netty channel [id: 0x2dc584da, /192.168.8.66:51670 => /192.168.8.209:20806], dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.929] log4j - 35100  INFO [DubboSharedHandler-thread-1] --- DubboProtocol:  [DUBBO] disconected from /192.168.8.209:20806,url:dubbo://192.168.8.209:20806/cn.sumpay.accountant.extservice.AccountSubjectService?anyhost=true&application=dubbo-consumer&check=false&codec=dubbo&default.actives=1000&default.executes=1000&default.timeout=20000&dubbo=2.4.10&executes=200&heartbeat=60000&interface=cn.sumpay.accountant.extservice.AccountSubjectService&loadbalance=roundrobin&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&retries=0&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.946] log4j - 35100  INFO [DubboShutdownHook] --- ZookeeperRegistry:  [DUBBO] Destroy unregister url consumer://192.168.8.66/cn.sumpay.accountant.extservice.AccountSubjectService?application=dubbo-consumer&category=consumers&check=false&dubbo=2.5.3&interface=cn.sumpay.accountant.extservice.AccountSubjectService&methods=queryAccountSubject,updateAccountSubject,setStatus,addAccountSubject&pid=35100&revision=1.0.4-SNAPSHOT&side=consumer&timestamp=1480062272965, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.946] log4j - 35100 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...
[2016-11-25 16:24:56.946] log4j - 35100  INFO [ZkClient-EventThread-17-192.168.8.217:2181] --- ZkEventThread: Terminate ZkClient event thread.
[2016-11-25 16:24:56.947] log4j - 35100 DEBUG [DubboShutdownHook] --- ZkConnection: Closing ZooKeeper connected to 192.168.8.217:2181
[2016-11-25 16:24:56.953] log4j - 35100  INFO [DubboShutdownHook] --- ZooKeeper: Session: 0x157c26e63221299 closed
[2016-11-25 16:24:56.953] log4j - 35100  INFO [main-EventThread] --- ClientCnxn: EventThread shut down
[2016-11-25 16:24:56.953] log4j - 35100 DEBUG [DubboShutdownHook] --- ZkClient: Closing ZkClient...done
[2016-11-25 16:24:56.954] log4j - 35100  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.954] log4j - 35100  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.954] log4j - 35100  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.160:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:24:56.954] log4j - 35100  INFO [DubboShutdownHook] --- DubboProtocol:  [DUBBO] Close dubbo connect: 192.168.8.66:0-->192.168.8.209:20806, dubbo version: 2.5.3, current host: 192.168.8.66
[2016-11-25 16:26:41.823] log4j - 17572  INFO [main] --- Cmp: Starting Cmp on guoxiaozheng with PID 17572 (E:\guoxiaozheng\sumpay-accountant-service\target\classes started by Administrator in E:\guoxiaozheng\sumpay-accountant-service)
[2016-11-25 16:26:41.824] log4j - 17572 DEBUG [main] --- Cmp: Running with Spring Boot v1.2.5.RELEASE, Spring v4.1.7.RELEASE
[2016-11-25 16:26:42.479] log4j - 17572 DEBUG [main] --- ClassPathMapperScanner: Identified candidate component class: file [E:\guoxiaozheng\sumpay-account\target\classes\cn\sumpay\accountant\dao\CasBankBalanceCheckMapper.class]
[2016-11-25 16:26:42.479] log4j - 17572 DEBUG [main] --- ClassPathMapperScanner: Creating MapperFactoryBean with name 'casBankBalanceCheckMapper' and 'cn.sumpay.accountant.dao.CasBankBalanceCheckMapper' mapperInterface
[2016-11-25 16:26:42.480] log4j - 17572 DEBUG [main] --- ClassPathMapperScanner: Enabling autowire by type for MapperFactoryBean with name 'casBankBalanceCheckMapper'.
[2016-11-25 16:26:42.598] log4j - 17572  INFO [main] --- LoggerFactory: using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
[2016-11-25 16:26:43.080] log4j - 17572 DEBUG [main] --- logging: Logging Provider: org.jboss.logging.Log4jLoggerProvider
[2016-11-25 16:26:43.081] log4j - 17572  INFO [main] --- Version: HV000001: Hibernate Validator 5.1.3.Final
[2016-11-25 16:26:43.085] log4j - 17572 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:26:43.090] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:26:43.091] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:26:43.092] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-25 16:26:43.095] log4j - 17572 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:26:43.098] log4j - 17572 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:26:43.168] log4j - 17572 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:26:43.258] log4j - 17572 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:26:43.272] log4j - 17572 DEBUG [main] --- ExtensionLoader:  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1
[2016-11-25 16:26:43.515] log4j - 17572 DEBUG [main] --- SqlSessionFactoryBean: Property 'configLocation' not specified, using default MyBatis Configuration
[2016-11-25 16:26:43.631] log4j - 17572 DEBUG [main] --- SqlSessionFactoryBean: Parsed mapper file: 'file [E:\guoxiaozheng\sumpay-account\target\classes\META-INF\sqlmap\CasBankBalanceCheckMapper.xml]'
[2016-11-25 16:26:44.114] log4j - 17572  INFO [main] --- StandardService: Starting service Tomcat
[2016-11-25 16:26:44.115] log4j - 17572  INFO [main] --- StandardEngine: Starting Servlet Engine: Apache Tomcat/8.0.23
[2016-11-25 16:26:44.202] log4j - 17572  INFO [localhost-startStop-1] --- [/]: Initializing Spring embedded WebApplicationContext
[2016-11-25 16:26:44.831] log4j - 17572 DEBUG [main] --- DefaultTraversableResolver: Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[2016-11-25 16:26:44.832] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[2016-11-25 16:26:44.832] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[2016-11-25 16:26:44.832] log4j - 17572 DEBUG [main] --- ConfigurationImpl: Setting custom ParameterNameProvider of type com.sun.proxy.$Proxy29
[2016-11-25 16:26:44.832] log4j - 17572 DEBUG [main] --- ValidationXmlParser: Trying to load META-INF/validation.xml for XML based Validator configuration.
[2016-11-25 16:26:44.833] log4j - 17572 DEBUG [main] --- ValidationXmlParser: No META-INF/validation.xml found. Using annotation based configuration only.
[2016-11-25 16:26:45.564] log4j - 17572  INFO [main] --- Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
[2016-11-25 16:26:45.571] log4j - 17572  INFO [main] --- Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
[2016-11-25 16:26:45.584] log4j - 17572  INFO [main] --- NioSelectorPool: Using a shared selector for servlet write/read
[2016-11-25 16:26:45.604] log4j - 17572  INFO [main] --- Cmp: Started Cmp in 3.988 seconds (JVM running for 4.227)
[2016-11-25 16:27:22.789] log4j - 17572  INFO [http-nio-8080-exec-1] --- [/]: Initializing Spring FrameworkServlet 'dispatcherServlet'
[2016-11-25 16:28:08.452] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-25 16:28:08.472] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7066621d] was not registered for synchronization because synchronization is not active
[2016-11-25 16:28:08.638] log4j - 17572  INFO [http-nio-8080-exec-2] --- DruidDataSource: {dataSource-1} inited
[2016-11-25 16:28:08.933] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@cc4a33d] will not be managed by Spring
[2016-11-25 16:28:08.935] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- insertSelective: ooo Using Connection [oracle.jdbc.driver.T4CConnection@cc4a33d]
[2016-11-25 16:28:08.938] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- insertSelective: ==>  Preparing: insert into CAS_BANK_BALANCE_CHECK ( ID, BALANCE_DATE, MODIFY_TIME, BANK_ID ) values ( ?, ?, ?, ? ) 
[2016-11-25 16:28:09.005] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- insertSelective: ==> Parameters: bdb144993f7b4aeca5a0bd84842c67e6(String), 20151025(String), sagfdshg55(String), safd54dsg(String)
[2016-11-25 16:28:09.017] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- insertSelective: <==    Updates: 1
[2016-11-25 16:28:09.017] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7066621d]
[2016-11-25 16:28:09.030] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: Creating a new SqlSession
[2016-11-25 16:28:09.031] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@450f4f9e] was not registered for synchronization because synchronization is not active
[2016-11-25 16:28:09.035] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SpringManagedTransaction: JDBC Connection [oracle.jdbc.driver.T4CConnection@cc4a33d] will not be managed by Spring
[2016-11-25 16:28:09.035] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- selectByExample: ooo Using Connection [oracle.jdbc.driver.T4CConnection@cc4a33d]
[2016-11-25 16:28:09.036] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- selectByExample: ==>  Preparing: select ID, BALANCE_DATE, PRE_BALANCE, DAY_DEBTOR_AMOUNT, DAY_CREDITOR_AMOUNT, DAY_CERTIFICATE, END_BALANCE, BANK_BALANCE, DIFF_AMOUNT, CHECK_ACCOUNT_STATUS, MODIFY_TIME, MODIFY_USER_ID, BANK_ID from CAS_BANK_BALANCE_CHECK 
[2016-11-25 16:28:09.036] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- selectByExample: ==> Parameters: 
[2016-11-25 16:28:09.070] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- selectByExample: <==      Total: 42
[2016-11-25 16:28:09.071] log4j - 17572 DEBUG [http-nio-8080-exec-2] --- SqlSessionUtils: Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@450f4f9e]
[2016-11-25 16:28:09.079] log4j - 17572  INFO [http-nio-8080-exec-2] --- BankBalanceCheckService: [{"id":"asfgds54646","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7373e0c2c13244f0997f272d2c51e876","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2475a72b478549ada1ca92e288888ebf","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"4146393cdfe04bdb95c2fbc96e90a2f1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5f6187831fae4eaa8f9b1340c26dcc84","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"60bf20e56030414fb1695f94428efbe6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"f5517b0ac31748e9881b899cc0d1208d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5240fbdb0c4049f7b41fde99636512df","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"84894511101445f38cff0933eca0c692","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"25d4ab7e054447189fa98fd58eb51761","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"3d24681ee4d141f69dbc0dc95c134a69","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"cdacaf91c38d4afebbd799b05f7dce63","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"0b66e6af728c4922b1942d378d813ca2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e0c0032ede22433b92f5be78918888d5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6c0420c872314b6c9be2d1565ffeb9f6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"7da8d78d867c45699e88a49adb2f5925","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"a50cd7e0dbac4d778076d1b544a5eb07","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"85a7fe0b752e4906bb85a3e8a51d7dcd","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"6739d23559cf4c80be845c7d121f740d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9a01d497577845bd8712e44ff61bd8a2","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"eb8d6bba8157425b8baeb68a2dee6be5","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"453967403fb34889bc54c6dc8718c666","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"538451bdd78b41f5b9ad97b34e8b34fe","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"1726951d0e2645e28ffa7a9554ebefe9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"2b233aaae96e48eaa89fda3f23bd652c","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bd472de09b3422f865e8f703d715dc1","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9c4416381c8f4970b4722c29734be573","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"c5c63f18872546ea9679f703dbcaa6a6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"8310d176114e430b930b0d3686ddc13d","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"56e817bc12ff4788a327219997fce61a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"5eb2b9cdcf05424b99768da8fb9e42f9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"be2860df6fb044559586e82e45621680","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"02d8a7dc1aec44189838ebc7341b0872","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"900c3465ace84278b570ee218059d8ec","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"9bbf374aed4c422d919a269307d0399a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"bd0f1af7dcc8444ba997dd3b1af0aa37","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"509e7c6aff6743d19b8d2d9aae17aa8b","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"bdb144993f7b4aeca5a0bd84842c67e6","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"e802d179b2ff428ab7650752e424446a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"91804019c2b44714a2dc1fb1d317d238","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"813fe9b0f68244e0a86a77d158035bd9","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"},{"id":"adc21c95bf5c4224b324874b6b4ca20a","balanceDate":"20151025","checkAccountStatus":"0","modifyTime":"sagfdshg55","bankId":"safd54dsg"}]
